#include "gtest/gtest.h"

#include <array>
#include <string>

const int MAX_VAL = 60;

using namespace std;

template<typename T, uint N>
bool get_bit(const array<T, N>& array, uint j)
{
	constexpr uint nb_bits = sizeof(T)*8;
	return array[j / nb_bits] & (1 << (j % nb_bits));
}

template<typename T, uint N>
void set_bit(array<T, N>& array, uint j)
{
	constexpr uint nb_bits = sizeof(T)*8;
	array[j / nb_bits] |= (1 << (j % nb_bits));
}

template<typename T, uint N>
void clear_bit(array<T, N>& array, uint j)
{
	constexpr uint nb_bits = sizeof(T)*8;
	array[j / nb_bits] &= ~(1 << (j % nb_bits));
}

template<typename T, uint N>
string print_headline()
{
	constexpr uint nb_bits = sizeof(T)*8;
	string result;
	for(uint i = 0; i < N; i++)
	{
		uint j = i % nb_bits;
		result += '0' + j;
		if(j+1 == nb_bits)
			result += '|';
	}
	return result;
}

template<typename T, uint N>
string print_array(array<T, N>& array)
{
	string result;
	for(uint i = 0; i < N; i++)
	{
		//#pragma unroll
		for(uint j = 0; j < sizeof(T)*8; j++)
		{
			result += get_bit<T, N>(array, i*8 + j) ? '1' : '0';
		}
		result += '|';
	}
	return result;
}

template<typename T, uint N>
array<T, N> countOccurrences(int A[], uint n)
{
	//static_assert(N >= sizeof(int));
	array<T, N> paired{0};
	array<T, N> occurred{0};
	for(uint i = 0; i < n; i++)
	{
		int j = A[i];
		if(j >= MAX_VAL)
			throw runtime_error("Value exceeds maximum allowed!");

		if(get_bit<T, N>(occurred, j))
			set_bit<T, N>(paired, j);
		else
			set_bit<T, N>(occurred, j);
	}
	array<T, N> unpaired{0};
	for(uint i = 0; i < N; i++)
	{
		unpaired[i] = occurred[i] & ~paired[i];
	}
	cout << "occurred: " << print_array<T, N>(occurred) << "\n";
	cout << "paired  : " << print_array<T, N>(paired)   << "\n";
	cout << "unpaired: " << print_array<T, N>(unpaired) << "\n";
	return unpaired;
}

constexpr uint div_up(uint n, uint d) {
    return (n / d) + ((n % d) && 1);
} //i.e. +1 iff (not exact int && positive result)
constexpr uint N = div_up(MAX_VAL, sizeof(char)*8);

uint solution(int A[], uint n)
{
	array<char, N> unpaired = countOccurrences<char, N>(A, n);
	for(uint i = 0; i < MAX_VAL; i++)
		if(get_bit<char, N>(unpaired, i))
			return i;
	throw runtime_error("No unpaired numbers found!");
	return 0;
}

TEST(OddOccurrencesInArray, Trivial)
{
	printf("N: %d\n", N);
	cout << "          " << print_headline<char, MAX_VAL>() << endl;

	array<int, 7> A{9, 3, 9, 3, 9, 7, 9};
	EXPECT_EQ(solution(A.data(), A.size()), 7);

	array<int, 7> B{9, 3, 9, 3, 9, 10, 10};
	ASSERT_THROW(solution(B.data(), B.size()), runtime_error);

	array<int, 8> C{9, 3, 9, 3, 9, 10, 10, 0};
	EXPECT_EQ(solution(C.data(), C.size()), 0);

	array<int, 8> D{9, 3, 9, 3, 9, 49, 11, 11 };
	EXPECT_EQ(solution(D.data(), D.size()), 49);
}